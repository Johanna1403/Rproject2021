}
}
# selective harvest
pop=pop0
meansSelective=matrix(NA,Ngens,2)
for(i in 1:Ngens){
pop=sort(pop,decreasing=TRUE)
meansSelective[i,1]=mean(pop)
harvest=pop[1:floor(popSize*harvestRate)]
remaining=pop[(floor(popSize*harvestRate)+1):popSize]
meansSelective[i,2]=mean(harvest)
pop=remaining
for(j in 1:(popSize-length(remaining))){
pop=c(pop,mean(sample(remaining,2)))
}
}
plot(1:Ngens,meansRandom[,1],xlab="generation",ylab="population mean size",type='o',ylim=c(0,max(c(meansRandom[,1],meansSelective[,1]))),main="population")
lines(1:Ngens,meansSelective[,1],col='red')
points(1:Ngens,meansSelective[,1],pch=15,col='red')
legend('bottomleft',c("random","selective"),col=c('black','red'),pch=c(21,15),box.lty=0)
plot(1:Ngens,meansRandom[,2],xlab="generation",ylab="harvest mean size",type='o',ylim=c(0,max(c(meansRandom[,2],meansSelective[,2]))),main="harvest")
lines(1:Ngens,meansSelective[,2],col='red')
points(1:Ngens,meansSelective[,2],pch=15,col='red')
legend('bottomleft',c("random","selective"),col=c('black','red'),pch=c(21,15),box.lty=0)
plot(1:Ngens,meansRandom[,1],xlab="generation",ylab="population mean size",type='o',ylim=c(0,max(c(meansRandom[,1],meansSelective[,1]))),main="population")
lines(1:Ngens,meansSelective[,1],col='red')
points(1:Ngens,meansSelective[,1],pch=15,col='red')
legend('bottomleft',c("random","selective"),col=c('black','red'),pch=c(21,15),box.lty=0)
plot(1:Ngens,meansRandom[,2],xlab="generation",ylab="harvest mean size",type='o',ylim=c(0,max(c(meansRandom[,2],meansSelective[,2]))),main="harvest")
lines(1:Ngens,meansSelective[,2],col='red')
points(1:Ngens,meansSelective[,2],pch=15,col='red')
legend('bottomleft',c("random","selective"),col=c('black','red'),pch=c(21,15),box.lty=0)
hist(pop0)
meansRandom[1,]
meansRandom[2,]
meansrandom[1:5,]
meansRandom[1:5,]
meansSelective
meansSelective[1:5,]
meansRandom[1:5,]
plot(1:Ngens,meansRandom[,1],xlab="generation",ylab="population mean size",type='o',ylim=c(0,max(c(meansRandom[,1],meansSelective[,1]))),main="population")
lines(1:Ngens,meansSelective[,1],col='red')
points(1:Ngens,meansSelective[,1],pch=15,col='red')
legend('bottomleft',c("random","selective"),col=c('black','red'),pch=c(21,15),box.lty=0)
plot(1:Ngens,meansRandom[,2],xlab="generation",ylab="harvest mean size",type='o',ylim=c(0,max(c(meansRandom[,2],meansSelective[,2]))),main="harvest")
lines(1:Ngens,meansSelective[,2],col='red')
points(1:Ngens,meansSelective[,2],pch=15,col='red')
legend('bottomleft',c("random","selective"),col=c('black','red'),pch=c(21,15),box.lty=0)
3.4*1.25
4.25*0.75
4.5*0.75
4.75*0.75
4.5*0.75
190.7/205
178.4/205
123/205
143.5/205
20*1/(1+0.55*1)
N=5
20*N/(1+0.55*N)
N*14
40*N/(1+0.55*N)
20*N/(1+0.55*N)
N*4
D=N/122
20*D/(1+0.55*D)
20*D/(1+0.55*D)*122
20*N/(1+0.55*N)
D=seq(0.01,2,0.01)
plot(D,20*D/(1+0.55*D)*122,type='l')
122*(20*26/122/(1+0.558*20/122))
1942/8
swirl()
library.install(swirl)
install.packages(swirl)
install.packages("swirl")
swirl()
library(swirl)
swirl()
1
swirl()
5+7
swirl()
x<-5+7
plot(0:20,sin(0:20),type='l')
plot(0:20,sin((0:20)/20),type='l')
plot(0:20,sin((0:20)/5),type='l')
plot(0:20,sin((0:20)/6),type='l')
plot(0:20,sin((0:20)/7),type='l')
plot(0:20,sin((0:20)/6.5),type='l')
plot(0:20,sin((0:20)/6.7),type='l')
plot(0:20,sin((0:20)/6.3),type='l')
plot(0:20,sin((0:20)/6.3),type='l',lwd=3,xlab="temperature",ylab="population growth")
23293/9*12
?character
0.42*5
600*exp(-5*2.1)
0.42*2
600*exp(-5*0.84)
log((ha+600)/(ha+9))
ha=36
log((ha+600)/(ha+9))
log((ha+600)/(ha+90))
log((ha+600)/(ha+500))
plot(0:600,log((ha+600/(ha+(0:600)))),type='l')
kd=seq(0,8,0.1)
plot(kd,log((ha+600)/(ha+(600*exp(-2*kd))))/2,type='l')
Izmix=600*exp(-kd*2)
plot(kd,Izmix)
Imultiplier=log((ha+600)/(ha+Izmix))/(kd*2)
plot(kd,Imultiplier)
kc=0.42
kd=kc*2
kd
kd=kc*50
kd
zmix=0:50
zmix=01:50
zmix
kd=0.84
Izmix=600*exp(-kd*zmix)
Imultiplier=log((ha+600)/(ha+Izmix))/(kd*zmix)
plot(zmix,Imultiplier)
14/62
14/62*5/14
14/18*5/14
62/(62+80)*5/31
0.359/0.07
13/42
.13*42
0.06*42
.18*42
0.73*42
21000/(107500+21000+14000+13000)
14000/(107500+21000+14000+13000)
13000/(107500+21000+14000+13000)
b=20
m=-(10/6)		# presumably smaller this is the harder it is to detect differences
plot(0:8,b+m*(0:8),type='l',xlab="log10 lake area",lwd=2)
maxProd=80		#mmol O2 m-3 d-1
LAs=10^c(4,5,6,7)
crits=b+m*log10(LAs)
C=10
as=(C-maxProd)/crits^2
bs=-2*as*crits
cs=as*crits^2+maxProd
tDOCpred=seq(0,30,0.1)
plot(tDOCpred,as[1]*tDOCpred^2+bs[1]*tDOCpred+cs[1],type='l',xlim=c(0,30),ylim=c(0,maxProd),col=1)
for(i in 2:length(crits)){
lines(tDOCpred,as[i]*tDOCpred^2+bs[i]*tDOCpred+cs[i],col=i)
}
lmp<-function(m){
f=summary(m)$fstatistic
p=pf(f[1],f[2],f[3],lower.tail=F)
return(p)
}
fitGPPvDOC<-function(N,LA,b=20,m=-10/6,C=10,maxProd=80){
doc=runif(N,min=seq(0,(20-20/N),length.out=N),max=seq((20/N),20,length.out=N))
doc2=doc*doc
LAs=runif(N,LA*0.75,LA*1.25)
crits=b+m*log10(LAs)
as=(C-maxProd)/crits^2
bs=-2*as*crits
cs=as*crits^2+maxProd
meanGPPs=as*doc^2+bs*doc+cs
GPPs=rnorm(N,meanGPPs,0.25*meanGPPs)
meanFit=lm(meanGPPs~doc2+doc)
mfc=coef(meanFit)
meanV=-mfc[3]/(2*mfc[2])
meanMax=mfc[2]*meanV^2+mfc[3]*meanV+mfc[1]
fit=lm(GPPs~doc2+doc)
fc=coef(fit)
fitV=-fc[3]/(2*fc[2])
fitMax=fc[2]*fitV^2+fc[3]*fitV+fc[1]
return(c(meanV-fitV,meanMax-fitMax,lmp(fit)))
}
Ns=seq(4,20)
reps=100
Vdiff=matrix(NA,length(Ns),reps)
MAXdiff=Vdiff
pvalue=Vdiff
for(i in 1:length(Ns)){
for(j in 1:reps){
print(c(i,j))
cur=fitGPPvDOC(N=Ns[i],LA=1e6)
Vdiff[i,j]=cur[1]
MAXdiff[i,j]=cur[2]
pvalue[i,j]=cur[3]
}
}
meanVdiff=rowMeans(abs(Vdiff))
sdVdiff=apply(Vdiff,1,sd)
meanMAXdiff=rowMeans(abs(MAXdiff))
sdMAXdiff=apply(MAXdiff,1,sd)
meanP=rowMeans(pvalue)
sdP=apply(pvalue,1,sd)
dev.new()
par(mfrow=c(2,2))
plot(Ns,meanVdiff,xlab="# of lakes sampled",ylab="error in critical tDOC",ylim=c(min(meanVdiff-sdVdiff),max(meanVdiff+sdVdiff)))
arrows(Ns,meanVdiff-sdVdiff,Ns,meanVdiff+sdVdiff,code=0)
abline(h=0,lty=2)
plot(Ns,meanMAXdiff,xlab="# of lakes sampled",ylab="error in max GPP",ylim=c(min(meanMAXdiff-sdMAXdiff),max(meanMAXdiff+sdMAXdiff)))
arrows(Ns,meanMAXdiff-sdMAXdiff,Ns,meanMAXdiff+sdMAXdiff,code=0)
abline(h=0,lty=2)
plot(Ns,meanP,xlab="# of lakes sampled",ylab="pvalue of quadratic fit",ylim=c(min(meanP-sdP),max(meanP+sdP)))
arrows(Ns,meanP-sdP,Ns,meanP+sdP,code=0)
abline(h=0.05,lty=2)
LAclasses<-function(N,meanLAs=10^(4:7),maxProd=80,b=20,m=-10/6,C=10){
LAs=runif((N*length(meanLAs)),rep(meanLAs*0.75,each=N),rep(meanLAs*1.25,each=N))
doc=runif((N*length(meanLAs)),min=rep(seq(0,(20-20/N),length.out=N),length(meanLAs)),max=rep(seq((20/N),20,length.out=N),length(meanLAs)))
doc2=doc*doc
crits=b+m*log10(LAs)
as=(C-maxProd)/crits^2
bs=-2*as*crits
cs=as*crits^2+maxProd
meanGPPs=as*doc^2+bs*doc+cs
GPPs=rnorm((N*length(meanLAs)),meanGPPs,0.25*meanGPPs)
#plot(doc,GPPs,col=rep(1:length(meanLAs),each=N))
fit=lm(GPPs~doc2+doc2:LAs+doc+doc:LAs)
return(summary(fit)$coefficients[4:5,4])
}
Ns=4:20
reps=100
p2=matrix(NA,length(Ns),reps)
p1=p2
for(i in 1:length(Ns)){
for(j in 1:reps){
print(c(i,j))
cur=LAclasses(Ns[i])
p2[i,j]=cur[1]
p1[i,j]=cur[2]
}
}
meanP2=rowMeans(p2)
sdP2=apply(p2,1,sd)
meanP1=rowMeans(p1)
sdP1=apply(p1,1,sd)
dev.new()
par(mfrow=c(2,1))
plot(Ns,meanP2,xlab="# of lakes sampled per size class",ylab="p-value of LA:doc^2",ylim=c(min(meanP2-sdP2),max(meanP2+sdP2)))
arrows(Ns,meanP2-sdP2,Ns,meanP2+sdP2,code=0)
abline(h=0.05,lty=2)
plot(Ns,meanP1,xlab="# of lakes sampled per size class",ylab="p-value of LA:doc",ylim=c(min(meanP1-sdP1),max(meanP1+sdP1)))
arrows(Ns,meanP1-sdP1,Ns,meanP1+sdP1,code=0)
abline(h=0.05,lty=2)
187*4/500
187*4/500
0.12*122
23.33*30
dlnorm(0,meanlog=5,sdlog=1)
15e6/120
6e6/120
7104/86.6
7413/84
?stripchart
180000/9*0.5*1.65
180000/9*1.65
60000*1.75
32000*1.6
(120000/9*1.24+32000*1.12+60000*1.5)*1.54
(112000/9*1.24+32000*1.12+60000*1.5)*1.54
(112000/18*1.24+32000*1.12+60000*1.5)*1.54
(112000/18*1.24+32000*1.12+55000*1.5)*1.54
(112000/18*1.27+32000*1.09+55000*1.23)*1.54
(112000*1.27+32000*1.09+55000*1.23)*1.54
(112000/9*1.27+32000*1.09+55000*1.23)*1.54
(112000/9*1.27+60000*1.23)*1.54
180000/18*1.27*1.54
112000/9
120000/9
5/70
x=13:24
sum(x)/length(x)
x=15:18
sum(x)/length(x)
x=20:24
sum(x)/length(x)
0.115078*1.4938
1.4938/0.115078
1.4938/0.115078/5280
1.4938/0.115078/5280*100
2.4585/1.2553
DOC=1:35
plot(DOC,5+2*DOC,log="y")
plot(DOC,5+2*DOC-0.001*DOC*DOC,type='l')
plot(DOC,5+2*DOC-0.01*DOC*DOC,type='l')
plot(DOC,5+2*DOC-0.1*DOC*DOC,type='l')
plot(DOC,5+2*DOC-0.1*DOC*DOC,type='l',log="y")
plot(DOC,2*exp(-(DOC-15)^2/(2*5)^2),type='l')
plot(DOC,2*exp(-(DOC-15)^2/(2*5)^2),type='l',log="y")
390000*0.2
390000-320000
485.73*12
(485.73-71)*12
123000/0.37
123000/0.37*0.65
123000/0.37*0.75
123000/0.37*0.25
249324-83108
123000/0.37*0.71
123000/0.37*0.29
236027-96405
(171000*0.82)-171000*0.18
2230231+2176048
2211603+2194578
?approxfun
104000*1.1/9
200/850000
x=matrix(c(1,2,3,4),nrow=2)
x
dnorm(x,2,1,log=TRUE)
dnorm(x,2,1)
dnorm(x,matrix(2,nrow=2,ncol=2),1)
matrix(2,nrow=2,ncol=2)
dnorm(x,matrix(4,nrow=2,ncol=2),1)
Qin=seq(1e3,4e6,length.out=50)
Pin=20000/Qin
plot(Qin,Pin,type='l')
?read.table
default.stringsAsFactors()
12/41
17/41
U1=0.2
U2=0.4
A=1:30
plot(Aa,exp(-U1*A)+U2,type='l')
plot(A,exp(-U1*A)+U2,type='l')
exp(-0.2*A)
U2
U2=0.21
U1=0.72
plot(A,exp(-U1*A)+U2,type='l')
10*0.1
30*12
30*12/1000
?glm
50*1e7/1000
122292.58+13328.42
550/12
162/12
x=seq(1,6,0.1)
N2=2+x*2
N2O=0.1+x*0.2
plot(x,N20/N2)
plot(x,N2O/N2)
plot(x,N2O/(N2+N2O))
plot(x,N2)
points(x,N2O,col='red')
plot(x,N2,ylim=c(0,14))
points(x,N2O,col='red')
plot(x,N2O/(N2+N2O))
810000/5
2785+270+592+355+873+82
12*8.53*40
install.packages("googlesheets4")
9235.79*52
9235.79*52*2
9235.79*12
(121912-110829.5)/110829.5
121912/9*10
sqrt(28.25^2+81^2)
tan(81/28.25)
81/28.25
121912*1.03
121912+121912/9
31000/12*1.5
31000/12*4.5
110000/9
122000/9
1/32*12
1/32
30*12/1000
30*12/1000/50
log(1-364/550)
log(1-364/550)/-0.19-0.024
log(1-164/550)/-0.19-0.024
log(1-364/550)/-0.19-0.024
6336.85+(6336.85*12)/9
db
dbname
log(4)
library(codetools)
library(deSolve)
?ode
?pdf
?outer
filled.contour(1:10,1:10,outer(1:10,1:10),plot.axes={axis(2)
axis(1,at=1:10,labels=1:10)
})
filled.contour(1:10,1:10,outer(1:10,1:10),plot.axes={axis(2)
axis(1,at=1:10,labels=1:10)
grid(col=rgb(1,1,1,0))
])
filled.contour(1:10,1:10,outer(1:10,1:10),plot.axes={axis(2)
axis(1,at=1:10,labels=1:10)
grid(col=rgb(1,1,1,0))
})
6336.85*12/9
6336.85*12/9+6336.85
6336.85/9235.79
121912*0.6861189
121912*0.6861189/12
6970.51*12/9+6970.51
26/61
5/13
1/61
5.2/13
4200*5.2/13
323.076*5.2
5.2/12
1615.18/(5/13)
4200*0.43333
26/61*4200
1680/4200
4200*5.2/13
5/12
25/60
5.2/12*4200
5.2/12*4200
121912/9
?anova_test
x=seq(1,1000,1)
y=2*x/(x+100)
plot(x,y)
plot(x,y,log="xy")
TP=c(10.4,13,31,10.8,24.2,24.3,57,65.7,59.3,57.4,54.5,37.6,27.2,20.9,20.8,18.4,86,72,66,66,100,88,50,40,3,180,12)
length(TP)
chl=c(3.75,5.8,18.4,3.5,12.9,12.4,31.8,34.8,41,24.8,23.9,14.9,12.7,6.8,8.8,6.1,33,35,35,18,30,22,10,45,0.3,260,1.8)
length(chl)
plot(TP,chl)
plot(TP,chl,log="xy")
plot(TP,chl,log="xy",xlim=c(1,1000),ylim=c(1,1000))
(1/31)/(1/12)
1/((1/31)/(1/12))
1/(0.015*(1/31)/(1/12))
1/(0.005*(1/31)/(1/12))
1/(0.025*(1/31)/(1/12))
121912/9
library(tidyverse)
length(seq(50,250,25))
length(seq(12,27,3))
9*6
1/0.007/12*31
1/365*60
0.5*0.25
0.5*0.25*3
citation()
10*1000/60
oad("VollenweiderOptimization.RData")
##### Generating Figure S1
load("VollenweiderOptimization.RData")
?n
log(3-2)
log(1)
log(3)-log(2)
cpue=q*abund^beta
abund=2:100
beta=0.4
q=1
cpue=q*abund^beta
plot(abund,cpue)
Labund=log(abund)
Lcpue=log(cpue)
fit=glm(Lcpue~Labund)
summary(fit)
pred=predict(fit,2:100)
?predict
pred=predict(fit)
length(pred)
length(2:100)
pred
plot(exp(pred),cpue)
swirl()
library(swirl)
swirl()
clear()
3+5
list.files()
getwd()
?getwd
3+5
x<-3+5
x
ls()
y<-15
ls()
x
y
rm(list=ls())
?setwd
install.packages(c("swirl","swirlify"))
install.packages(c("swirl", "swirlify"))
library("swirl")
swirl()
swirl()
library(swirl)
swirl()
setwd("~/Documents/Teaching/Intro2Comp/ICB_Fall2021/Rproject/Rproject2021/")
setwd("~/Documents/Teaching/Intro2Comp/ICB_Fall2021/Rproject/Rproject2021/")
list.files()
setwd("countryX")
filenames<-list.files(full.names=TRUE)
Countryfunction<-function(filenames){
y=read.csv(filenames,sep=",",header=TRUE)
}
AllCountryX<-lapply(filenames,Countryfunction)
length(filenames)
dim(AllCountryX[[1]])
dim(AllCountryX[[2]])
dim(AllCountryX[[3]])
df<-do.call(rbind.data.frame,AllCountryX)
dim(df)
